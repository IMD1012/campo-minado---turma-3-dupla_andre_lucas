#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <stdbool.h>

#define LINHAS 10 // mudei a declaração das constantes para a forma de #define
#define COLUNAS 20

typedef struct Celulas_t
{
    bool temBomba;   // pode ser true ou false
    bool estaAberta; // pode ser true ou false
    int vizinhos;    // vai de 0 a 8
    char campo;
} Celulas;

// Variavel Global da Matriz referente ao campo
int l, c; // l->linhas e c->colunas
const int QTD_BOMBAS = 40;
Celulas campoMinado[LINHAS][COLUNAS];

// função para iniciarcampo
void inicioJogo()
{
    for (l = 0; l < LINHAS; l++)
    {
        for (c = 0; c < COLUNAS; c++)
        {
            campoMinado[l][c].estaAberta = false; // inicia com nenhuma celula aberta
            campoMinado[l][c].temBomba = false;   // qualquer celula que o usario escolha nao vai ter bomba;
            campoMinado[l][c].vizinhos = 0;       // possui zero vizinhos com bomba, pois ainda nao tem nenhuma posição aberta
        }
    }
}

// sortear bombas no campo
void addBombas(int QTD_BOMBAS, Celulas campoMinado[LINHAS][COLUNAS])
{
    srand(time(NULL));
    for (int i = 1; i <= QTD_BOMBAS; i++)
    {
        l = rand() % LINHAS;
        c = rand() % COLUNAS;
        if (campoMinado[l][c].temBomba == false) // checa se não tem bomba, caso nao tenha add uma bomba na coordenada
        {
            campoMinado[l][c].temBomba = true; // add bomba na coordenada
        }
        else
        {
            i--; // caso ja tenha bombana corrdenada, decrementa a contagem para que nao fiqeu com menos bomba do que deveria
        }
    }
}

// função que verifica coordenadas validas
bool coordValid(int l, int c)
{
    if(l >= 0 && l < LINHAS && c >= 0 && c < COLUNAS)
        return true;
    else
        return false;
}

int quantBombasVizinhas(int x, int y){
    int quantidade = 0;

    if(coordValid(x - 1, c) && campoMinado[x-1][y].temBomba){
        quantidade++;}
    if(coordValid(x + 1, y) && campoMinado[x+1][y].temBomba){
        quantidade++;}
    if(coordValid(x, y + 1) && campoMinado[x][y+1].temBomba){
        quantidade++;}
    if(coordValid(x, y - 1) && campoMinado[x][y-1].temBomba){
        quantidade++;}
    // DSE -> [L-1][C-1] // DIE -> [L+1[[C-1] // DSD -> [L-1][C+1] // DID -> [L+1][C+1]
    if (coordValid(x-1, y-1) && campoMinado[x-1][y-1].temBomba) // DSE
    {
        quantidade++;
    }
    if (coordValid(x+1, y-1) && campoMinado[x+1][y-1].temBomba) // DIE
    {
        quantidade++;
    }
    if (coordValid(x-1, y+1) && campoMinado[x-1][y+1].temBomba) // DSD
    {
        quantidade++;
    }
    if (coordValid(x+1, y+1) && campoMinado[x+1][y+1].temBomba) // DID
    {
        quantidade++;
    }
        
    return quantidade;
}

void campoVisualInicial(Celulas campoMinado[LINHAS][COLUNAS])
{
    printf("\n\n\t    ");
    for(l = 0; l < COLUNAS; l++)
        printf(" %d  ", l); // índices das colunas
    printf("\n\t   ------------------------------------------------------------------------------------------\n");
    for(l = 0; l < LINHAS; l++)
    {
        printf("\t%d  |", l); // índices das linhas
        for(c = 0; c < COLUNAS; c++)
        {
            if(campoMinado[l][c].estaAberta)
            {
                if(campoMinado[l][c].temBomba)
                {
                    printf(" * ");
                }
                else
                {
                    printf(" %d ", campoMinado[l][c].vizinhos);
                }
            }
            else
            {
                printf("   ");
            }
            printf("|"); // decobrir pq nao esta imprimindo as ultimas duas vezes
        }
        printf("\n\t   ------------------------------------------------------------------------------------------\n");
    }
}

void campoVisual(Celulas campoMinado[LINHAS][COLUNAS], int x, int y)
{
    if (campoMinado[x][y].temBomba != true)
    {

        campoMinado[x][y].campo = '_';
        for (int i = 0; i < LINHAS; i++)
        {
            for (int j = 0; j < COLUNAS; j++)
            {
                printf("%c", campoMinado[i][j].campo);
            }
            printf("\n");
        }
    }
    else
    {

        campoMinado[x][y].campo = '*';
        for (int i = 0; i < LINHAS; i++)
        {
            for (int j = 0; j < COLUNAS; j++)
            {
                printf("%c", campoMinado[i][j].campo);
            }
            printf("\n");
        }
    }
}

int main(int argc, char const *argv[])
{
    int x, y;

    inicioJogo();
    addBombas(QTD_BOMBAS, campoMinado);
    campoVisualInicial(campoMinado);

    printf("Digite a coordenada da celula que deseja revelar: ");
    scanf("%d %d", &x, &y);

    while (campoMinado[x][y].temBomba != true)
    {
        campoVisual(campoMinado, x, y);

        printf("Digite a coordenada da celula que deseja revelar: ");
        scanf("%d %d", &x, &y);
    }

    printf("PERDEU! Voce encontrou uma bomba :( !");

    return 0;
}
